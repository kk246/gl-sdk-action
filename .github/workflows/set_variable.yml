run-name: Build ${{ github.event.inputs.pkgname || github.event.inputs.sourcecode || 'untitled' }};${{ github.event.inputs.repobranch }} for ${{ github.event.inputs.device }}

on: 
  workflow_dispatch:
    inputs:
      device:
        description: 'Select device'     
        required: true
        type: choice
        options:
        - MT2500
        - MT3000
        - AX1800
        - AXT1800
        - SF1200
        - SFT1200
      sourcecode:
        description: 'Source code URL'     
        required: true
      repobranch:
        description: 'Source code Branch'     
        required: false
      pkgname:
        description: 'Package Description'
        required: false
      email:
        description: 'Git account email address'
        required: false
      password:
        description: 'Git account password'  
        required: false

env:
  SOURCECODEURL: ${{ github.event.inputs.sourcecode || 'https://github.com/luochongjun/edgerouter.git' }}
  BRANCH: ${{ github.event.inputs.repobranch }}
  BOARD: ${{ github.event.inputs.device || 'MT2500' }}
  EMAIL: ${{ github.event.inputs.email }}
  PASSWORD: ${{ github.event.inputs.password }}
  LINUX_VERMAGIC: 86cd10224392f0f1f47de97edd009387

jobs:
  apt-get:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@master
        
      - name: Update System Packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: asciidoc bash bc binutils bzip2 fastjar flex gawk gcc genisoimage gettext git intltool jikespg libgtk2.0-dev libncurses5-dev libssl-dev make mercurial patch perl-modules python2.7-dev rsync ruby sdcc subversion unzip util-linux wget xsltproc zlib1g-dev zlib1g-dev
          version: 1.0
          execute_install_scripts: true

      - name: Restore Cache SDK
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: ./openwrt-sdk/
          key: glsdk-${{ github.event.inputs.device }}
          
      - name: Get gl-sdk
        if: steps.cache-restore.outputs.cache-hit != 'true'
        working-directory: ./
        run: |
          chmod +x ./build.sh
          ./build.sh

      - name: Acquire ./scripts/feeds
        if: steps.cache-restore.outputs.cache-hit != 'true'
        working-directory: ./openwrt-sdk
        run: |
          ./scripts/feeds update -a
        continue-on-error: true
  
      - name: Install ./scripts/feeds
        if: steps.cache-restore.outputs.cache-hit != 'true'
        working-directory: ./openwrt-sdk
        run: |
          ./scripts/feeds install -a
  
      - name: Make defconfig
        if: steps.cache-restore.outputs.cache-hit != 'true'
        working-directory: ./openwrt-sdk
        run: |
          echo CONFIG_ALL=n >.config
          echo CONFIG_SIGNED_PACKAGES=n >>.config
          make defconfig
  
      - name: Make ./package/feeds/luci/luci-base/compile
        if: steps.cache-restore.outputs.cache-hit != 'true'
        working-directory: ./openwrt-sdk
        run: |
          make $(($(nproc)+1)) LINUX_VERMAGIC:=$LINUX_VERMAGIC ./package/feeds/luci/luci-base/compile
  
      - name: Save Cache SDK
        if: steps.cache-restore.outputs.cache-hit != 'true'
        id: cache-primes-save
        uses: actions/cache/save@v4
        with:
          path: ./openwrt-sdk/
          key: glsdk-${{ github.event.inputs.device }}

      - name: Get PKGNAME
        id: pkg
        run: |
          mkdir -p  ${GITHUB_WORKSPACE}/buildsource
          cd ${GITHUB_WORKSPACE}/buildsource
          if [ -z "$BRANCH" ]; then
              git clone "$SOURCECODEURL" newPKG
          else
              git clone --branch "$BRANCH" --single-branch "$SOURCECODEURL" newPKG
          fi
          
          # Find the Makefile containing PKG_NAME
          MAKEFILE=$(find "$(pwd)" -type f -name 'Makefile' -exec grep -l 'PKG_NAME' {} +)
          
          # Check if exactly one Makefile was found
          if [ "$(echo "$MAKEFILE" | wc -l)" -eq 1 ]; then
          	# Extract the directory containing the Makefile
          	MAKEFILE_DIR=$(dirname "$MAKEFILE")
            MAKE_NAME="${MAKEFILE_DIR##*/}"
            FEED_DIR="${MAKEFILE_DIR%/*}"
          
          	# Extract PKG_NAME value from the Makefile
          	PKG_NAME_VALUE=$(grep 'PKG_NAME' "$MAKEFILE" | awk -F'=' '{print $2}' | tr -d '[:space:]')
           
          	echo "MAKEFILE_DIR is set to: $MAKEFILE_DIR"
            echo "MAKE_NAME is set to: $MAKE_NAME"
            echo "FEED_DIR is set to: $FEED_DIR"
          	echo "PKG_NAME is set to: $PKG_NAME_VALUE"

            echo "MAKE=$MAKE_NAME" >> "$GITHUB_OUTPUT"
            echo "PATH=$FEED_DIR" >> "$GITHUB_OUTPUT"
            echo "NAME=$PKG_NAME_VALUE" >> "$GITHUB_OUTPUT"
          else
          	echo "Either no Makefile or multiple Makefiles found."
          	exit 1
          fi
          
      - name: Install PKGNAME
        id: pkg2
        working-directory: ./openwrt-sdk
        run: |
          cd $GITHUB_WORKSPACE/openwrt-sdk
          sed -i "1i\src-link githubaction ${{ steps.pkg.outputs.PATH }}" feeds.conf.default
          echo Contents of "feeds.conf.default"
          cat feeds.conf.default
          echo ""
          echo "./scripts/feeds update githubaction"
          ./scripts/feeds update githubaction
          
          echo ""
          echo "./scripts/feeds list -r githubaction"
          ./scripts/feeds list -r githubaction
          
          result=$(./scripts/feeds list -r githubaction | awk '{print $1}')
          echo "NAME=$result" >> "$GITHUB_OUTPUT"
          
          echo ""
          echo "./scripts/feeds install -a -p githubaction"
          ./scripts/feeds install -a -p githubaction
          
      - name: Update defconfig (with newPKG)
        working-directory: ./openwrt-sdk
        run: |
          # https://openwrt.org/docs/guide-developer/toolchain/use-buildsystem#configure_using_config_diff_file
          cp .config .config-before
          echo "CONFIG_PACKAGE_${{ steps.pkg2.outputs.NAME }}=m" >> .config
          make defconfig
          cp .config .config-after
          echo ""
          diff -u ".config-before" ".config-after" > config.diff
          echo "::group::{"Contents of 'config.diff'",unfold}"
          diff -u ".config-before" ".config-after"
          echo "::endgroup::{unfold}"
          
          

      - name: Print Folders within Github Workspace
        run: |
          echo ""
          cd ${GITHUB_WORKSPACE}/openwrt-sdk/package/feeds/githubaction
          echo "Contents of '$(pwd)'"
          ls -al $(pwd)
          echo ""
          cd ${GITHUB_WORKSPACE}/buildsource
          echo "Contents of '$(pwd)'"
          tree -t $(pwd)

      - name: Make ./package/feeds/githubaction/newPKG/prepare
        working-directory: ./openwrt-sdk
        run: |
          make V=s LINUX_VERMAGIC:=$LINUX_VERMAGIC ./package/feeds/githubaction/${{ steps.pkg.outputs.MAKE }}/prepare

      - name: Make ./package/feeds/githubaction/newPKG/compile
        working-directory: ./openwrt-sdk
        run: |
          make V=s LINUX_VERMAGIC:=$LINUX_VERMAGIC ./package/feeds/githubaction/${{ steps.pkg.outputs.MAKE }}/compile
  
      # - name: Preparing *.IPKs for Upload
      #   working-directory: ./openwrt-sdk
      #   run: |
      #     mkdir "${GITHUB_WORKSPACE}/output_ipks"
      #     find bin -type f -exec ls -lh {} \;
      #     find bin -type f -name "*.ipk" -exec cp -f {} "${GITHUB_WORKSPACE}/output_ipks" \; 
      #     ls -al "${GITHUB_WORKSPACE}/output_ipks/"

      - name: Upload Artefacts (IPKs)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pkg2.outputs.NAME }}-LINUX_VERMAGIC=${{env.LINUX_VERMAGIC}}
          if-no-files-found: error
          path: |
            ./openwrt-sdk/bin/
            ./openwrt-sdk/config.diff
  
      # - name: Upload Artefacts (IPKs)
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ steps.pkg2.outputs.NAME }}-LINUX_VERMAGIC=${{env.LINUX_VERMAGIC}}
      #     if-no-files-found: error
      #     path: |
      #       ./output_ipks/*ipk*
            
      # - name: Preparing GL-SDK for Upload
      #   run: |
      #     tar -czvf glsdk-${{ github.event.inputs.device }}-full.tar.gz openwrt-sdk/
      #     ls -l
          
      # - name: Upload Artefacts (GL-SDK)
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: glsdk-${{ github.event.inputs.device }}
      #     path: |
      #       ./glsdk-${{ github.event.inputs.device }}-full.tar.gz
