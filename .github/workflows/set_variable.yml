run-name: Build ${{ github.event.inputs.pkgname || untitled }} for ${{ github.event.inputs.device }}

on: 
  workflow_dispatch:
    inputs:
      device:
        description: 'Select device'     
        required: true
        type: choice
        options:
        - MT2500
        - MT3000
        - AX1800
        - AXT1800
        - SF1200
        - SFT1200
      sourcecode:
        description: 'Source code URL'     
        required: true
      pkgname:
        description: 'Package Description'
        required: false
      email:
        description: 'Git account email address'
        required: false
      password:
        description: 'Git account password'  
        required: false

env:
  SOURCECODEURL: ${{ github.event.inputs.sourcecode || 'https://github.com/luochongjun/edgerouter.git' }}
  BOARD: ${{ github.event.inputs.device || 'MT2500' }}
  EMAIL: ${{ github.event.inputs.email }}
  PASSWORD: ${{ github.event.inputs.password }}

jobs:
  apt-get:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@master
  
      - name: Update System Packages
        run: |
          sudo -E apt-get update
          sudo -E apt-get install -y asciidoc bash bc binutils bzip2 fastjar flex gawk gcc genisoimage gettext git intltool jikespg libgtk2.0-dev libncurses5-dev libssl-dev
          sudo -E apt-get install -y make mercurial patch perl-modules python2.7-dev rsync ruby sdcc subversion unzip util-linux wget xsltproc zlib1g-dev zlib1g-dev

      - name: Restore Cache SDK
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: ./openwrt-sdk/
          key: glsdk-${{ github.event.inputs.device }}
          
      - name: Get gl-sdk
        if: steps.cache-restore.outputs.cache-hit != 'true'
        working-directory: ./
        run: |
          chmod +x ./build.sh
          ./build.sh

      - name: Acquire ./scripts/feeds
        if: steps.cache-restore.outputs.cache-hit != 'true'
        working-directory: ./openwrt-sdk
        run: |
          ./scripts/feeds update -a
        continue-on-error: true
  
      - name: Install ./scripts/feeds
        if: steps.cache-restore.outputs.cache-hit != 'true'
        working-directory: ./openwrt-sdk
        run: |
          ./scripts/feeds install -a
  
      - name: Make defconfig
        if: steps.cache-restore.outputs.cache-hit != 'true'
        working-directory: ./openwrt-sdk
        run: |
          echo CONFIG_ALL=y >.config
          make defconfig
  
      - name: Make ./package/feeds/luci/luci-base/compile
        if: steps.cache-restore.outputs.cache-hit != 'true'
        working-directory: ./openwrt-sdk
        run: |
          make V=s ./package/feeds/luci/luci-base/compile
  
      - name: Save Cache SDK
        if: steps.cache-restore.outputs.cache-hit != 'true'
        id: cache-primes-save
        uses: actions/cache/save@v4
        with:
          path: ./openwrt-sdk/
          key: glsdk-${{ github.event.inputs.device }}

      - name: Get PKGNAME
        id: pkg
        run: |
          mkdir -p  ${GITHUB_WORKSPACE}/buildsource
          cd ${GITHUB_WORKSPACE}/buildsource
          git clone "$SOURCECODEURL"
          
          # Find the Makefile containing PKG_NAME
          MAKEFILE=$(find "$(pwd)" -type f -name 'Makefile' -exec grep -l 'PKG_NAME' {} +)
          
          # Check if exactly one Makefile was found
          if [ "$(echo "$MAKEFILE" | wc -l)" -eq 1 ]; then
          	# Extract the directory containing the Makefile
          	MAKEFILE_DIR=$(dirname "$MAKEFILE")
          
          	# Extract PKG_NAME value from the Makefile
          	PKG_NAME_VALUE=$(grep 'PKG_NAME' "$MAKEFILE" | awk -F'=' '{print $2}' | tr -d '[:space:]')
          	echo "MAKEFILE_DIR is set to: $MAKEFILE_DIR"
          	echo "PKG_NAME is set to: $PKG_NAME_VALUE"
            echo "{PATH}={$MAKEFILE_DIR}" >> "$GITHUB_OUTPUT"
            echo "{NAME}={$PKG_NAME}" >> "$GITHUB_OUTPUT"
          else
          	echo "Either no Makefile or multiple Makefiles found."
          	exit 1
          fi
  
      - name: Install PKGNAME
        working-directory: ./openwrt-sdk
        run: |
          cd $GITHUB_WORKSPACE/openwrt-sdk
          sed -i "1i\src-link githubaction ${{ steps.pkg.outputs.PATH }}" feeds.conf.default
          echo Contents of "feeds.conf.default"
          cat feeds.conf.default

      - name: Print Folders within Github Workspace
        run: |
          echo "Contents of '$(pwd)'"
          ls -R | grep ":$" | sed -e 's/:$//'

      - name: Make ./package/feeds/githubaction/${PKGNAME}/compile
        working-directory: ./openwrt-sdk
        run: |
          ./scripts/feeds update githubaction
          ./scripts/feeds install ${{ steps.pkg.outputs.NAME }}
          make V=s ./package/feeds/githubaction/${{ steps.pkg.outputs.NAME }}/compile
  
      - name: Preparing *.IPKs for Upload
        working-directory: ./openwrt-sdk
        run: |
          mkdir "${GITHUB_WORKSPACE}/output_ipks"
          find bin -type f -exec ls -lh {} \;
          find bin -type f -name "*.ipk" -exec cp -f {} "${GITHUB_WORKSPACE}/output_ipks" \; 
          ls -al "${GITHUB_WORKSPACE}/output_ipks/"
  
      - name: Upload Artefacts (IPKs)
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.pkg.outputs.NAME }}_related_ipks
          if-no-files-found: error
          path: |
            ./output_ipks/*ipk*
            
      - name: Preparing GL-SDK for Upload
        run: |
          tar -czvf glsdk-${{ github.event.inputs.device }}-full.tar.gz openwrt-sdk/
          ls -l
          
      - name: Upload Artefacts (GL-SDK)
        uses: actions/upload-artifact@v2
        with:
          name: glsdk-${{ github.event.inputs.device }}
          path: |
            ./glsdk-${{ github.event.inputs.device }}-full.tar.gz
